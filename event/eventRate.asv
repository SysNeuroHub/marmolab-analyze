function [Rate, chan_ind, unit_ind] = eventRate(o,varargin)

%  Adapted from trialRate, but for cases where there are mulitple events
%  per trial, for example in freeviwing tasks with mulitple eye movements
%  or mulitple stimulus presenations (like face invaders)

%  Returns the spike rate for a set of events from an mdbase object over a
%  specified time bin
%
% Input:
%   o = mdbase object with spiking data
%
% Optional arguments:
%   channels - channels to load data for (defaut: o.spike.numChannels)
%   eventonsets - a cell array, one cell per trial that can contain
%   mulitple time points per trial to align data from (default: start of
%  each trial)
%   > make sure its in ms from
%   trial start!
%   trind = logical vector to tell which trials to use (default:
%   o.complete, if it exists, otherwise o.numTrials)
%   bn - time bin around onset time
%
% Output
%   Rate - a cell array of spike rates in spikes/sec for each event over
%   the specififed time window (size: {nCh, nTr}(nevents))
%
% 2025-06-17 - Maureen Hagan <maureen.hagan@monash.edu>



p = inputParser();
p.KeepUnmatched = true;
p.addParameter('channels',[],@(x) isnumeric(x) || isempty(x)); %validateattributes(x,{'numeric'},{'positive','>=',min(o.spikes.numChannels),'<=',max(o.spikes.numChannels)}));
p.addParameter('onset','',@(x) ischar(x) || isempty(x));
p.addParameter('bn',[0,1000]); %, @(x) validateattributes(x,{'numeric'},{'positive','==',2))
p.addParameter('eventonsets',[]); %,@(x) validateattributes(x,{'numeric'},{'positive','>=',min(o.spikes.numTrials),'<=',max(o.spikes.numTrials)}));
p.addParameter('trind',[]); %, @(x) validateattributes(x,{'logical'}))

p.parse(varargin{:});

args = p.Results;

if isempty(args.channels)
    channels = 1:o.spikes.numChannels;
else
    channels = args.channels;
end

%find which trials to use
if isempty(args.trind)
    if isprop(o,'complete'), trind = o.complete;
    else, trind = true(1,o.spikes.numTrials);
    end
else, trind = args.trind;
end

if isempty(args.eventonsets)
    eventonsets = cell(1,numel(trind));

end

[spikes, chan_ind, unit_ind] = eventSpike(o,'eventonsets',args.eventonsets,'trind', trind, 'channels', channels, 'bn',args.bn, 'onsetvector', args.onsetvector);

if isscalar(spikes) 
    Spikes{1} = spikes;
else
    Spikes = spikes;
end

numChan = numel(Spikes);
numTrial = numel(Spikes{1});
% covert trial spikes to a rate (channels, trials)
Rate = cell(numChan,numTrial);

bn = args.bn;

for ich = 1:numChan
    for itr = 1:numTrial
        numEvents = numel(eventonsets{itr});
        Rate{ich,itr} = nan(1,numEvents);
        for iev = 1:numEvents
        ind = Spikes{ich}{itr}{iev};
        Rate{ich,itr}(iev) = length(ind)./diff(bn).*1e3;
        end
    end
end

if numel(channels) == 1 
    Rate = squeeze(Rate);
end

